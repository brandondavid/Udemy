# coding: utf-8

"""
    Meme Meister

    API to create memes  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MemeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'top_caption': 'str',
        'bottom_caption': 'str'
    }

    attribute_map = {
        'id': 'id',
        'top_caption': 'topCaption',
        'bottom_caption': 'bottomCaption'
    }

    def __init__(self, id=None, top_caption=None, bottom_caption=None):  # noqa: E501
        """MemeInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._top_caption = None
        self._bottom_caption = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if top_caption is not None:
            self.top_caption = top_caption
        if bottom_caption is not None:
            self.bottom_caption = bottom_caption

    @property
    def id(self):
        """Gets the id of this MemeInfo.  # noqa: E501

        ID of meme  # noqa: E501

        :return: The id of this MemeInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MemeInfo.

        ID of meme  # noqa: E501

        :param id: The id of this MemeInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def top_caption(self):
        """Gets the top_caption of this MemeInfo.  # noqa: E501

        The text near the top of the image  # noqa: E501

        :return: The top_caption of this MemeInfo.  # noqa: E501
        :rtype: str
        """
        return self._top_caption

    @top_caption.setter
    def top_caption(self, top_caption):
        """Sets the top_caption of this MemeInfo.

        The text near the top of the image  # noqa: E501

        :param top_caption: The top_caption of this MemeInfo.  # noqa: E501
        :type: str
        """

        self._top_caption = top_caption

    @property
    def bottom_caption(self):
        """Gets the bottom_caption of this MemeInfo.  # noqa: E501

        The text near the bottom of the image  # noqa: E501

        :return: The bottom_caption of this MemeInfo.  # noqa: E501
        :rtype: str
        """
        return self._bottom_caption

    @bottom_caption.setter
    def bottom_caption(self, bottom_caption):
        """Sets the bottom_caption of this MemeInfo.

        The text near the bottom of the image  # noqa: E501

        :param bottom_caption: The bottom_caption of this MemeInfo.  # noqa: E501
        :type: str
        """

        self._bottom_caption = bottom_caption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
