/**
 * Music API
 * **Music API with playlists**
 *
 * OpenAPI spec version: 0.3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/NewPlaylist', 'model/PlaylistWithSongs'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/NewPlaylist'), require('../model/PlaylistWithSongs'));
  } else {
    // Browser globals (root is window)
    if (!root.MusicApi) {
      root.MusicApi = {};
    }
    root.MusicApi.DefaultApi = factory(root.MusicApi.ApiClient, root.MusicApi.Error, root.MusicApi.NewPlaylist, root.MusicApi.PlaylistWithSongs);
  }
}(this, function(ApiClient, Error, NewPlaylist, PlaylistWithSongs) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.3.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deletePlaylistId operation.
     * @callback module:api/DefaultApi~deletePlaylistIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Remove a playlist.**
     * @param {String} playlistId ID of the playlist to remove
     * @param {module:api/DefaultApi~deletePlaylistIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePlaylistId = function(playlistId, callback) {
      var postBody = null;

      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling deletePlaylistId");
      }


      var pathParams = {
        'playlist-id': playlistId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/playlist/{playlist-id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImage operation.
     * @callback module:api/DefaultApi~getImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Returns a generated image for the playlist.**
     * @param {String} playlistId ID of the playlist for which to generate an image
     * @param {module:api/DefaultApi~getImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getImage = function(playlistId, callback) {
      var postBody = null;

      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getImage");
      }


      var pathParams = {
        'playlist-id': playlistId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['image/png'];
      var returnType = File;

      return this.apiClient.callApi(
        '/playlist/{playlist-id}/image', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylist operation.
     * @callback module:api/DefaultApi~getPlaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Return one or more playlists.**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of playlists to return
     * @param {Number} opts.offset Number of playlists to skip
     * @param {String} opts.search Search term
     * @param {module:api/DefaultApi~getPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPlaylist = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/playlist', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistId operation.
     * @callback module:api/DefaultApi~getPlaylistIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistWithSongs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Return a playlist.**
     * @param {String} playlistId ID of the playlist to return
     * @param {module:api/DefaultApi~getPlaylistIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistWithSongs}
     */
    this.getPlaylistId = function(playlistId, callback) {
      var postBody = null;

      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getPlaylistId");
      }


      var pathParams = {
        'playlist-id': playlistId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PlaylistWithSongs;

      return this.apiClient.callApi(
        '/playlist/{playlist-id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPlaylist operation.
     * @callback module:api/DefaultApi~postPlaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Create a new playlist.**
     * @param {module:model/NewPlaylist} newPlaylist The playlist to create
     * @param {module:api/DefaultApi~postPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postPlaylist = function(newPlaylist, callback) {
      var postBody = newPlaylist;

      // verify the required parameter 'newPlaylist' is set
      if (newPlaylist === undefined || newPlaylist === null) {
        throw new Error("Missing the required parameter 'newPlaylist' when calling postPlaylist");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/playlist', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
